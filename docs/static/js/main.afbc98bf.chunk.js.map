{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","console","log","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAkB5C,OACI,sBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAnBc,SAAEP,GACxBF,EAAcE,EAAEQ,OAAOF,a,+BCRlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,mGAEsFC,UAAWH,IAFjG,SAGAI,MAAOF,GAHP,cAGbG,EAHa,OAInBC,QAAQC,IAAIL,GAJO,SAKEG,EAAKG,OALP,uBAKZC,EALY,EAKZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXZ,IAAKU,EAAIG,OAAOC,iBAAiBd,QAXtB,kBAeZQ,GAfY,4CAAH,sDCEPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOZ,EAAU,EAAVA,IAErC,OACI,sBAAKgB,UAAU,2CAAf,UACI,qBAAKC,IAAMjB,EAAMkB,IAAMN,IACvB,4BAAKA,QCHJO,EAAU,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EAEZd,mBAAS,CAC/BuB,KAAM,GACNa,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAuBtC,OAhBAC,qBAAW,WAEP1B,EAAQC,GACH0B,MAAK,SAAAC,GACFC,YAAW,WACPtB,QAAQC,IAAIoB,GACZH,EAAS,CACLf,KAAMkB,EACNL,SAAQ,MAGb,UAIb,CAAEtB,IACGuB,EDpBiBM,CAAa7B,GAA9BS,EAF8B,EAE9BA,KAAMa,EAFwB,EAExBA,QAEb,OACI,qCACI,6BAAMtB,IAELsB,GAAW,wCAEV,qBAAKJ,UAAU,YAAf,SAEUT,EAAKE,KAAK,SAACC,GAAD,OACN,cAAC,EAAD,eAESA,GADCA,EAAIC,aEd7BiB,EAAe,WAAO,IAAD,EAEM5C,mBAAS,CAAC,aAFhB,mBAEvB6C,EAFuB,KAEX9C,EAFW,KAU9B,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEQ8C,EAAWpB,KAAK,SAACX,EAAUa,GAAX,OACZ,cAAC,EAAD,CAAwBb,SAAUA,GAApBA,Y,MCjBtCgC,IAASC,OAEL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.afbc98bf.chunk.js","sourcesContent":["import React,{ useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({setCategories}) => {\n    \n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = ( e ) => {\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) =>{\n        e.preventDefault();\n\n        if (inputValue.trim().length > 2) {\n            setCategories((cats) => [inputValue, ...cats]);\n            setInputValue('');\n        }\n        \n    }\n\n    return (\n        <form onSubmit={ handleSubmit }>\n            <input \n                type=\"text\"\n                value={ inputValue }\n                onChange={ handleInputChange }\n            />\n        </form>\n    );\n\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","export const getGifs = async( category ) =>{\n    \n    const url = `https://api.giphy.com/v1/gifs/search?api_key=Nap3htwanzFDiSZ01quso0yBY7NDBSWf&limit=10&q=${ encodeURI( category ) }`;\n    const resp = await fetch( url );\n    console.log(url);\n    const {data} = await resp.json();\n\n    const gifs = data.map( img =>{\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images.downsized_medium.url\n        }\n    })\n\n    return gifs;\n}\n","import React from 'react'\n\nexport const GifGridItem = ( {id, title, url} ) => {\n    \n    return (\n        <div className='card animate__animated animate__bounceIn'>\n            <img src={ url } alt={ title } />\n            <p>{ title }</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n\n    const {data, loading} = useFetchGifs(category); \n    \n    return (\n        <>\n            <h3>{ category }</h3>\n\n            {loading && <p>Loading</p> }\n            \n            { <div className='card-grid'>\n                    {\n                        data.map( (img) => (\n                            <GifGridItem \n                                key={ img.id }\n                                { ...img }\n                            />\n                        ))\n                    }\n            </div>}\n        </>\n        \n    )\n}\n","import { useState ,useEffect} from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n    \n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect( () =>{\n\n        getGifs(category)\n            .then(imgs => {\n                setTimeout(() => {\n                    console.log(imgs);\n                    setState({\n                        data: imgs,\n                        loading:false\n                    });\n\n                }, 3000);\n\n            });\n\n    },[ category ])\n    return state;\n}\n","import React,{ useState} from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n\n    const [categories, setCategories] = useState(['Yu-Gi-Oh']);\n\n    /* const handleAdd = () =>{\n        setCategories([...categories, 'Yugioh']);\n    } */\n\n    \n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={ setCategories }/>\n            <hr />\n\n            <ol>\n                { \n                    categories.map( (category, id) => (\n                        <GifGrid key={category} category={category} />\n                    ))\n                }\n            </ol>\n        </>\n    )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n\n    <GifExpertApp />,\n    document.getElementById('root')\n    \n);\n"],"sourceRoot":""}